plugins {
    id("com.android.application")
    id("kotlin-android")
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id("dev.flutter.flutter-gradle-plugin")
    id("com.google.gms.google-services")
}

import java.util.Properties

android {
    namespace = "com.example.parking_manager_app_iot"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = "27.0.12077973"

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_11
        targetCompatibility = JavaVersion.VERSION_11
    }    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_11.toString()
    }

    defaultConfig {
        // Load API keys from local.properties
        val localProperties = Properties()
        val localPropertiesFile = rootProject.file("local.properties")
        if (localPropertiesFile.exists()) {
            localPropertiesFile.inputStream().use { localProperties.load(it) }
        }

        // Set manifest placeholders for API keys
        manifestPlaceholders["MAPS_API_KEY"] = localProperties.getProperty("MAPS_API_KEY") ?: ""

        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId = "com.example.parking_manager_app_iot"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = 23
        targetSdk = flutter.targetSdkVersion
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    buildTypes {
        release {
            // Production signing configuration
            // TODO: Create and configure production signing config
            // signingConfig = signingConfigs.getByName("release")
            
            // For now, using debug keys (CHANGE FOR PRODUCTION!)
            signingConfig = signingConfigs.getByName("debug")
            
            // Enable code shrinking and obfuscation for production
            isMinifyEnabled = true
            isShrinkResources = true
            proguardFiles(
                getDefaultProguardFile("proguard-android-optimize.txt"),
                "proguard-rules.pro"
            )
        }
        
        debug {
            isDebuggable = true
            isMinifyEnabled = false
        }
    }
}
dependencies {
    // Import the Firebase BoM (Bill of Materials) to manage Firebase library versions
    implementation(platform("com.google.firebase:firebase-bom:33.14.0")) // REPLACE with the latest Firebase Android BoM version

    // Add individual Firebase SDKs here, if you're using them directly.
    // However, for Flutter, these are often handled by the Flutter Firebase packages.
    // e.g., implementation("com.google.firebase:firebase-analytics-ktx")
    //       implementation("com.google.firebase:firebase-auth-ktx")
    //       implementation("com.google.firebase:firebase-firestore-ktx")
    // If you're using the Flutter `firebase_core` package correctly,
    // you typically don't need to add these explicitly.
}

flutter {
    source = "../.."
}
